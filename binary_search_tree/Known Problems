=>	Traversals
		-	In Order
		-	Pre Order
		-	Post Order
		- 	DFS (yet to try this)
		-	BFS (yet to try this)
		


=>	A program to check if a binary tree is BST or not

		A better solution looks at each node only once. The trick is to write a utility helper function 
		isBSTUtil(struct node* node, int min, int max) that traverses down the tree keeping track of the narrowing min and max 
		allowed values as it goes, looking at each node only once. The initial values for min and max should be INT_MIN and INT_MAX 
		— they narrow from there.
		
		/* Returns true if the given tree is a binary search tree 
		 (efficient version). */ 
			int isBST(struct node* node) 
			{ 
			  return(isBSTUtil(node, INT_MIN, INT_MAX)); 
			} 
		
		/* Returns true if the given tree is a BST and its 
		 values are >= min and <= max. */ 
		int isBSTUtil(struct node* node, int min, int max)


=>	Find k-th smallest element in BST
		
		Method 1: InOrder with keeping track of number of nodes visited. O(n) time complexity
		
		Another solution O(h) where h is height of the tree
		
		Method 2: Augmented  Tree Data Structure.

			The idea is to maintain rank of each node. We can keep track of elements in a subtree of any node while building the tree. 
			Since we need K-th smallest element, we can maintain number of elements of left subtree in every node.
			
			Assume that the root is having N nodes in its left subtree. If K = N + 1, root is K-th node. If K < N, we will continue our 
			search (recursion) for the Kth smallest element in the left subtree of root. If K > N + 1, we continue our search in the right 
			subtree for the (K – N – 1)-th smallest element. Note that we need the count of elements in left subtree only.


=>	Check if each internal node of a BST has exactly one child

		Given Preorder traversal of a BST, check if each non-leaf node has only one child. Assume that the BST contains unique entries.
		
		Examples
		
		Input: pre[] = {20, 10, 11, 13, 12}
		Output: Yes
		The give array represents following BST. In the following BST, every internal
		node has exactly 1 child. Therefor, the output is true.
		        20
		       /
		      10
		       \
		        11
		          \
		           13
		           /
		         12
		  
		Solution: 
			1. Scan the last two nodes of preorder & mark them as min & max.
			2. Scan every node down the preorder array. Each node must be either smaller than the min node or larger than the max node.
				Update min & max accordingly.


=>	Print Left View of a Binary Tree

		The left view contains all nodes that are first nodes in their levels. A simple solution is to do level order traversal 
		and print the first node in every level.	
		


=>	Print Right View of a Binary Tree			
		
		The Right view contains all nodes that are last nodes in their levels. A simple solution is to do level order traversal 
		and print the last node in every level.
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		